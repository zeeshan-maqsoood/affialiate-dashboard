

import { useEffect, useState, Fragment } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
  CartesianGrid,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from "recharts";
import { Disclosure, Listbox, Transition, Tab } from "@headlessui/react";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faGoogle, faFacebook, faTiktok, faLinkedin } from '@fortawesome/free-brands-svg-icons';
import { faGlobe, faBox, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';
import { ChevronUpIcon } from "lucide-react";
import classNames from "classnames";

export default function AnalyticsDashboard() {
  const [trafficData, setTrafficData] = useState([]);
  const [funnelMetrics, setFunnelMetrics] = useState({});
  const [funnelChartData, setFunnelChartData] = useState([]);
  const [eventChartData, setEventChartData] = useState([]);
  const [eventPieData, setEventPieData] = useState([]);
  const [carrierData, setCarrierData] = useState([]);
  const [policyData, setPolicyData] = useState([]);
  const [pageViewData, setPageViewData] = useState([]);
  const [eventData, setEventData] = useState([]);
  const [totalPurchases, setTotalPurchases] = useState(0);
  const [totals, setTotals] = useState({ sessions: 0, activeUsers: 0, views: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  // Pagination states for tables
  const [pageViewPage, setPageViewPage] = useState(1);
  const [eventsPage, setEventsPage] = useState(1);
  const itemsPerPage = 10;

  // Filters
  const [filters, setFilters] = useState({
    startDate: "2025-08-01",
    endDate: "2025-08-31",
    country: "",
    deviceCategory: "",
    source: "",
  });

  const deviceOptions = ["All Devices", "desktop", "mobile", "tablet"];

  const sourceOptions = [
    { name: "All Sources", icon: faGlobe },
    { name: "google", icon: faGoogle },
    { name: "meta", icon: faFacebook },
    { name: "bing", icon: faBox },
    { name: "tiktok", icon: faTiktok },
    { name: "linkedin", icon: faLinkedin },
    { name: "(direct)", icon: faExternalLinkAlt },
  ];

  const PIE_CHART_COLORS = ["#3b82f6", "#dc2626", "#f59e0b", "#10b981"];

  async function fetchAllData() {
    try {
      setLoading(true);
      const params = new URLSearchParams(filters);

      const [
        trafficRes,
        funnelMetricsRes,
        funnelChartRes,
        eventChartRes,
        carrierRes,
        policyRes,
        purchaseRes,
        pageViewRes,
        eventRes
      ] = await Promise.all([
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/traffic?groupBy=source&${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/funnel?${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/funnel-chart-data?${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/event-chart-data?${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/breakdowns?type=carriers&${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/breakdowns?type=policies&${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/purchase-success?${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/page-views-by-source?${params.toString()}`),
        fetch(`https://z61mbrbz88.execute-api.eu-north-1.amazonaws.com/api/all-events?${params.toString()}`)
      ]);

      const trafficJson = await trafficRes.json();
      const funnelMetricsJson = await funnelMetricsRes.json();
      const funnelChartJson = await funnelChartRes.json();
      const eventChartJson = await eventChartRes.json();
      const carrierJson = await carrierRes.json();
      const policyJson = await policyRes.json();
      const purchaseJson = await purchaseRes.json();
      const pageViewJson = await pageViewRes.json();
      const eventJson = await eventRes.json();

      setTrafficData(trafficJson.results || []);
      setTotals(trafficJson.totals || { sessions: 0, activeUsers: 0, views: 0 });
      setFunnelMetrics(funnelMetricsJson.funnel || {});
      setFunnelChartData(funnelChartJson.results || []);
      setEventChartData(eventChartJson.results || []);
      setCarrierData(carrierJson.results || []);
      setPolicyData(policyJson.results || []);
      setPageViewData(pageViewJson.results || []);
      setEventData(eventJson.results || []);
      setTotalPurchases(purchaseJson.totalPurchases || 0);

      setError(false);
    } catch (err) {
      console.error("Error fetching analytics:", err);
      setError(true);
    } finally {
      setLoading(false);
    }
  }

  // Effect to process event chart data into pie chart data
  useEffect(() => {
    if (eventChartData.length > 0) {
      const totals = eventChartData.reduce((acc, current) => {
        acc.form_start += current.form_start;
        acc.form_abandon += current.form_abandon;
        acc.form_submit += current.form_submit;
        acc.proceed_to_checkout += current.proceed_to_checkout;
        return acc;
      }, {
        form_start: 0,
        form_abandon: 0,
        form_submit: 0,
        proceed_to_checkout: 0
      });

      const pieData = [
        { name: 'Form Starts', value: totals.form_start },
        { name: 'Form Abandons', value: totals.form_abandon },
        { name: 'Form Submits', value: totals.form_submit },
        { name: 'Proceed to Checkout', value: totals.proceed_to_checkout },
      ];
      setEventPieData(pieData);
    } else {
      setEventPieData([]);
    }
  }, [eventChartData]);

  useEffect(() => {
    fetchAllData();
  }, [filters]);

  const funnelConversionRate = (step1, step2) => {
    if (step1 === 0) return "0%";
    return `${((step2 / step1) * 100).toFixed(2)}%`;
  };

  // Helper function to find the icon for the selected source
  const getSourceIcon = (sourceName) => {
    const source = sourceOptions.find(opt => opt.name.toLowerCase() === (sourceName || "All Sources").toLowerCase());
    return source ? source.icon : faGlobe; // Use a Font Awesome icon as fallback
  };

  const currentSource = filters.source || "All Sources";
  const CurrentSourceIcon = getSourceIcon(currentSource);

  // Pagination logic
  const paginatedPageViewData = pageViewData.slice((pageViewPage - 1) * itemsPerPage, pageViewPage * itemsPerPage);
  const totalPageViewPages = Math.ceil(pageViewData.length / itemsPerPage);

  const paginatedEventData = eventData.slice((eventsPage - 1) * itemsPerPage, eventsPage * itemsPerPage);
  const totalEventsPages = Math.ceil(eventData.length / itemsPerPage);

  const generatePageNumbers = (currentPage, totalPages, maxButtons = 5) => {
    const pages = [];
    const halfMax = Math.floor(maxButtons / 2);

    if (totalPages <= maxButtons) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      let startPage = Math.max(1, currentPage - halfMax);
      let endPage = Math.min(totalPages, currentPage + halfMax);

      if (currentPage - halfMax < 1) {
        endPage = maxButtons;
      } else if (currentPage + halfMax > totalPages) {
        startPage = totalPages - maxButtons + 1;
      }

      if (startPage > 1) {
        pages.push(1);
        if (startPage > 2) pages.push('...');
      }

      for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) pages.push('...');
        pages.push(totalPages);
      }
    }
    return pages;
  };

  const pageViewButtons = generatePageNumbers(pageViewPage, totalPageViewPages);
  const eventButtons = generatePageNumbers(eventsPage, totalEventsPages);

  return (
    <div className="p-4 md:p-8 bg-transparent min-h-screen overflow-x-hidden rounded-2xl shadow">
      {/* Filters in Disclosure */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <div className="bg-white rounded-2xl shadow p-4 mb-8">
            <Disclosure.Button className="flex w-full justify-between items-center text-lg font-semibold text-gray-700">
              Filters
              {open ? <ChevronUpIcon className="w-5 h-5" /> : <ChevronDownIcon className="w-5 h-5" />}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-4">
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                <input
                  type="date"
                  value={filters.startDate}
                  onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}
                  className="border p-2 rounded-lg focus:ring-2 focus:ring-indigo-500"
                />
                <input
                  type="date"
                  value={filters.endDate}
                  onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}
                  className="border p-2 rounded-lg focus:ring-2 focus:ring-indigo-500"
                />
                {/* Device filter */}
                <Listbox
                  value={filters.deviceCategory || "All Devices"}
                  onChange={(value) =>
                    setFilters({ ...filters, deviceCategory: value === "All Devices" ? "" : value })
                  }
                >
                  <div className="relative">
                    <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left border focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 sm:text-sm">
                      <span className="block truncate">
                        {filters.deviceCategory || "All Devices"}
                      </span>
                      <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                        {/* Note: You still need ChevronDownIcon from some library */}
                        {/* <ChevronDownIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /> */}
                      </span>
                    </Listbox.Button>
                    <Transition
                      as={Fragment}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm z-10">
                        {deviceOptions.map((device, deviceIdx) => (
                          <Listbox.Option
                            key={deviceIdx}
                            className={({ active }) =>
                              classNames(
                                "relative cursor-default select-none py-2 pl-10 pr-4",
                                active ? "bg-indigo-100 text-indigo-900" : "text-gray-900"
                              )
                            }
                            value={device}
                          >
                            {({ selected }) => (
                              <>
                                <span
                                  className={classNames(
                                    "block truncate",
                                    selected ? "font-medium" : "font-normal"
                                  )}
                                >
                                  {device}
                                </span>
                                {selected ? (
                                  <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-indigo-600">
                                    {/* Note: You still need CheckIcon from some library */}
                                    {/* <CheckIcon className="h-5 w-5" aria-hidden="true" /> */}
                                  </span>
                                ) : null}
                              </>
                            )}
                          </Listbox.Option>
                        ))}
                      </Listbox.Options>
                    </Transition>
                  </div>
                </Listbox>

                {/* Source filter with Icons */}
                <Listbox
                  value={currentSource}
                  onChange={(value) =>
                    setFilters({ ...filters, source: value === "All Sources" ? "" : value })
                  }
                >
                  <div className="relative">
                    <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left border focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 sm:text-sm">
                      <div className="flex items-center space-x-2">
                        <FontAwesomeIcon icon={CurrentSourceIcon} className="h-5 w-5 text-gray-500" />
                        <span className="block truncate">{currentSource}</span>
                      </div>
                      <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                        {/* <ChevronDownIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /> */}
                      </span>
                    </Listbox.Button>
                    <Transition
                      as={Fragment}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm z-10">
                        {sourceOptions.map((source, sourceIdx) => (
                          <Listbox.Option
                            key={sourceIdx}
                            className={({ active }) =>
                              classNames(
                                "relative cursor-default select-none py-2 pl-10 pr-4",
                                active ? "bg-indigo-100 text-indigo-900" : "text-gray-900"
                              )
                            }
                            value={source.name}
                          >
                            {({ selected }) => (
                              <div className="flex items-center space-x-2">
                                <FontAwesomeIcon icon={source.icon} className="h-5 w-5 text-gray-500" />
                                <span
                                  className={classNames(
                                    "block truncate",
                                    selected ? "font-medium" : "font-normal"
                                  )}
                                >
                                  {source.name}
                                </span>
                                {selected ? (
                                  <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-indigo-600">
                                    {/* <CheckIcon className="h-5 w-5" aria-hidden="true" /> */}
                                  </span>
                                ) : null}
                              </div>
                            )}
                          </Listbox.Option>
                        ))}
                      </Listbox.Options>
                    </Transition>
                  </div>
                </Listbox>
              </div>
            </Disclosure.Panel>
          </div>
        )}
      </Disclosure>

      {/* Main Dashboard Grid */}
      <div className="space-y-6 lg:grid lg:grid-cols-3 lg:gap-6">
        {/* Left Column: Traffic and Funnel */}
        <div className="lg:col-span-2 space-y-6">
          {/* Summary Totals */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-2xl shadow text-center">
              <p className="text-sm text-gray-500">Active Users</p>
              <p className="text-2xl font-bold text-indigo-600">
                {loading ? "..." : totals.activeUsers.toLocaleString()}
              </p>
            </div>
            <div className="bg-white p-6 rounded-2xl shadow text-center">
              <p className="text-sm text-gray-500">Sessions</p>
              <p className="text-2xl font-bold text-green-600">
                {loading ? "..." : totals.sessions.toLocaleString()}
              </p>
            </div>
            <div className="bg-white p-6 rounded-2xl shadow text-center">
              <p className="text-sm text-gray-500">Views</p>
              <p className="text-2xl font-bold text-yellow-600">
                {loading ? "..." : totals.views.toLocaleString()}
              </p>
            </div>
          </div>

          {/* Traffic Line Chart */}
          <div className="bg-white rounded-2xl shadow p-4 h-[450px]">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">Traffic Over Time</h2>
            {loading ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full text-red-600">
                Failed to load data
              </div>
            ) : (
              <ResponsiveContainer width="100%" height="90%">
                <LineChart data={trafficData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="sessions" stroke="#6366f1" name="Sessions" />
                  <Line type="monotone" dataKey="activeUsers" stroke="#16a34a" name="Active Users" />
                  <Line type="monotone" dataKey="views" stroke="#f59e0b" name="Views" />
                </LineChart>
              </ResponsiveContainer>
            )}
          </div>

          {/* Funnel Conversion Chart */}
          <div className="bg-white rounded-2xl shadow p-4 h-[450px]">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">Funnel Conversion Over Time</h2>
            {loading ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full text-red-600">
                Failed to load data
              </div>
            ) : (
              <ResponsiveContainer width="100%" height="90%">
                <LineChart data={funnelChartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="totalQuotes" stroke="#3b82f6" name="Quotes" />
                  <Line type="monotone" dataKey="checkoutClicks" stroke="#8b5cf6" name="Checkout Clicks" />
                  <Line type="monotone" dataKey="completedPolicies" stroke="#22c55e" name="Completed Policies" />
                </LineChart>
              </ResponsiveContainer>
            )}
          </div>
           <div className="bg-white rounded-2xl shadow p-4 ">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">Policy & Carrier Breakdowns</h2>
            {loading ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full text-red-600">
                Failed to load data
              </div>
            ) : (
              <Tab.Group>
                <Tab.List className="flex space-x-1 rounded-xl bg-gray-100 p-1 mb-4">
                  <Tab
                    className={({ selected }) =>
                      classNames(
                        "w-full rounded-lg py-2.5 text-sm font-medium leading-5",
                        "focus:outline-none ring-offset-2 ring-indigo-500 focus:ring-2",
                        selected ? "bg-white shadow text-gray-700" : "text-gray-500 hover:bg-white/[0.12] hover:text-gray-900"
                      )
                    }
                  >
                    Carriers
                  </Tab>
                  <Tab
                    className={({ selected }) =>
                      classNames(
                        "w-full rounded-lg py-2.5 text-sm font-medium leading-5",
                        "focus:outline-none ring-offset-2 ring-indigo-500 focus:ring-2",
                        selected ? "bg-white shadow text-gray-700" : "text-gray-500 hover:bg-white/[0.12] hover:text-gray-900"
                      )
                    }
                  >
                    Policies
                  </Tab>
                </Tab.List>
                <Tab.Panels>
                  <Tab.Panel>
                    <ResponsiveContainer width="100%" height={300}>
                      <BarChart data={carrierData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="label" />
                        <YAxis />
                        <Tooltip />
                        <Bar dataKey="count" fill="#6366f1" />
                      </BarChart>
                    </ResponsiveContainer>
                  </Tab.Panel>
                  <Tab.Panel>
                    <ResponsiveContainer width="100%" height={300}>
                      <PieChart>
                        <Pie data={policyData} dataKey="count" nameKey="label" cx="50%" cy="50%" outerRadius={100}>
                          {policyData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={PIE_CHART_COLORS[index % PIE_CHART_COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                        <Legend />
                      </PieChart>
                    </ResponsiveContainer>
                  </Tab.Panel>
                </Tab.Panels>
              </Tab.Group>
            )}
          </div>
        </div>

        {/* Right Column: Breakdowns */}
        <div className="lg:col-span-1 space-y-6">
          {/* Funnel Overview Metrics */}
          <div className="bg-white rounded-2xl shadow p-6">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">Conversion Metrics</h2>
            {loading ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full text-red-600">
                Failed to load data
              </div>
            ) : (
              <div className="flex flex-col gap-6">
                <div className="text-center">
                  <p className="text-sm text-gray-500">Total Quotes</p>
                  <p className="text-3xl font-bold text-blue-600">
                    {funnelMetrics.totalQuotes?.toLocaleString() || 0}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-sm text-gray-500">Checkout Clicks</p>
                  <p className="text-3xl font-bold text-purple-600">
                    {funnelMetrics.checkoutClicks?.toLocaleString() || 0}
                  </p>
                  <p className="text-xs font-semibold text-gray-500">
                    {funnelConversionRate(funnelMetrics.totalQuotes, funnelMetrics.checkoutClicks)} from Quotes
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-sm text-gray-500">Completed Policies</p>
                  <p className="text-3xl font-bold text-green-600">
                    {funnelMetrics.completedPolicies?.toLocaleString() || 0}
                  </p>
                  <p className="text-xs font-semibold text-gray-500">
                    {funnelConversionRate(funnelMetrics.checkoutClicks, funnelMetrics.completedPolicies)} from Clicks
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-sm text-gray-500">Total Purchases</p>
                  <p className="text-3xl font-bold text-pink-600">
                    {totalPurchases.toLocaleString()}
                  </p>
                </div>
              </div>
            )}
          </div>
          
          {/* User Journey Events Pie Chart */}
          <div className="bg-white rounded-2xl shadow p-4 h-[450px]">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">User Journey Event Distribution</h2>
            {loading ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full text-red-600">
                Failed to load data
              </div>
            ) : (
              <ResponsiveContainer width="100%" height="90%">
                <PieChart>
                  <Pie
                    data={eventPieData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={120}
                    fill="#8884d8"
                    label
                  >
                    {eventPieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={PIE_CHART_COLORS[index % PIE_CHART_COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            )}
          </div>

          {/* Breakdowns Bar Charts and Pie Chart */}
          <div className="mt-8 bg-white rounded-2xl shadow p-4">
            <h2 className="text-lg font-semibold text-gray-700 mb-4">
              Analytics Breakdown
            </h2>
            {loading ? (
              <div className="flex items-center justify-center h-48 text-gray-500">
                Loading...
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-48 text-red-600">
                Failed to load data
              </div>
            ) : (
              <Tab.Group>
                <Tab.List className="flex space-x-1 rounded-xl bg-gray-100 p-1 mb-4">
                  <Tab
                    className={({ selected }) =>
                      classNames(
                        "w-full rounded-lg py-2.5 text-sm font-medium leading-5",
                        "focus:outline-none ring-offset-2 ring-indigo-500 focus:ring-2",
                        selected
                          ? "bg-white shadow text-gray-700"
                          : "text-gray-500 hover:bg-white/[0.12] hover:text-gray-900"
                      )
                    }
                  >
                    Page Views
                  </Tab>
                  <Tab
                    className={({ selected }) =>
                      classNames(
                        "w-full rounded-lg py-2.5 text-sm font-medium leading-5",
                        "focus:outline-none ring-offset-2 ring-indigo-500 focus:ring-2",
                        selected
                          ? "bg-white shadow text-gray-700"
                          : "text-gray-500 hover:bg-white/[0.12] hover:text-gray-900"
                      )
                    }
                  >
                    Events
                  </Tab>
                </Tab.List>

                <Tab.Panels>
                  {/* Page Views Table */}
                  <Tab.Panel>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Page Path
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Source
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Active Users
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Views
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {paginatedPageViewData.map((row, index) => (
                            <tr key={index}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.pagePath}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {row.source}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {row.activeUsers.toLocaleString()}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {row.views.toLocaleString()}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    {pageViewData.length > itemsPerPage && (
                      <div className="mt-4 flex justify-center space-x-2">
                        
                        {pageViewButtons.map((page, i) => (
                          <button
                            key={i}
                            onClick={() => typeof page === 'number' && setPageViewPage(page)}
                            className={classNames(
                              "px-4 py-2 text-sm font-medium rounded-lg",
                              page === pageViewPage ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700",
                              typeof page !== 'number' && "pointer-events-none"
                            )}
                          >
                            {page}
                          </button>
                        ))}
                      
                      </div>
                    )}
                  </Tab.Panel>

                  {/* Events Table */}
                  <Tab.Panel>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Event Name
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Count
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {paginatedEventData.map((row, index) => (
                            <tr key={index}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.eventName}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {row.eventCount.toLocaleString()}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    {eventData.length > itemsPerPage && (
                      <div className="mt-4 flex justify-center space-x-2">
                        
                        {eventButtons.map((page, i) => (
                          <button
                            key={i}
                            onClick={() => typeof page === 'number' && setEventsPage(page)}
                            className={classNames(
                              "px-4 py-2 text-sm font-medium rounded-lg",
                              eventsPage === i + 1 ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700",
                              typeof page !== 'number' && "pointer-events-none"
                            )}
                          >
                            {page}
                          </button>
                        ))}
                      
                      </div>
                    )}
                  </Tab.Panel>
                </Tab.Panels>
              </Tab.Group>
            )}
          </div>
          
        </div>
      </div>
    </div>
  );
}